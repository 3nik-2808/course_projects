#INCLUDE <16F887.H>
#DEVICE ADC=10
#FUSES NOWDT, PUT, NOPROTECT, NOLVP
#USE DELAY(CLOCK=125K)
#INCLUDE <LIB_LCD.C>
#INCLUDE <STDBOOL.H>
#BIT TMR1IF = 0x0C.0
#DEFINE PIN_POS_UP     PIN_B0
#DEFINE PIN_POS_DOWN   PIN_B1
#DEFINE PIN_VEL_UP     PIN_B2
#DEFINE PIN_VEL_DOWN   PIN_B3

INT16 DUTY = 29;
FLOAT ANGLE = 0;
INT16 VELOCITY = 0;
INT DIRECTION = 1;
FLOAT ADC_RES;
FLOAT VELOCITY_DISPLAY;

// INCREASE ANGLE
VOID POS_UP(){
   IF (DUTY < 75){DUTY = DUTY + 1;}
}

// DECREASE ANGLE
VOID POS_DOWN(){
   IF (DUTY > 12){DUTY = DUTY - 1;}
}

VOID VEL_UP(){
   IF (VELOCITY < 20){VELOCITY = VELOCITY + 1;}
}

VOID VEL_DOWN(){
   IF (VELOCITY > 0){VELOCITY = VELOCITY - 1;}
}

VOID VELOCITY_TO_DISPLAY(){
   VELOCITY_DISPLAY = ((FLOAT)VELOCITY*2.88)/0.5;
}

#INT_TIMER1
VOID AUTO_CONTROL(){
   IF (VELOCITY > 0){
      IF (DIRECTION == 1){
         POS_UP();   IF(DUTY == 75){DIRECTION = 0;}
      }
      ELSE {
         POS_DOWN();   IF(DUTY == 12){DIRECTION = 1;}
      }
      SET_TIMER1(65536 - 15625/VELOCITY);
   }
   ELSE {
      SET_TIMER1(34286);
   }
   VELOCITY_TO_DISPLAY();
}

#INT_RB
VOID PORT_B_INT(){
   IF (INPUT(PIN_POS_UP))     {POS_UP();}
   IF (INPUT(PIN_POS_DOWN))   {POS_DOWN();}
   IF (INPUT(PIN_VEL_UP))     {VEL_UP();}
   IF (INPUT(PIN_VEL_DOWN))   {VEL_DOWN();}
}

VOID ANGLE_TO_DUTY(FLOAT ANGLE_TO_CONVERT){
   FLOAT DUTY_FLOAT = ((ANGLE_TO_CONVERT)/18.0 + 0.02)*624.0;
   DUTY = (INT16)DUTY_FLOAT;
}

VOID DISPLAY(){
   LCD_COMMAND(0X80);      DELAY_US(1);  LCD_DATA("ANGLE:");
   LCD_COMMAND(0X8D);      DELAY_US(1);  LCD_DATA((INT)ANGLE/100%10 + '0');
   LCD_COMMAND(0X8E);      DELAY_US(1);  LCD_DATA((INT)ANGLE/10%10 + '0');
   LCD_COMMAND(0X8F);      DELAY_US(1);  LCD_DATA((INT)ANGLE%10 + '0');
   LCD_COMMAND(0X90);      DELAY_US(1);  LCD_DATA('.');
   LCD_COMMAND(0X91);      DELAY_US(1);  LCD_DATA(((INT)(ANGLE*10))%10 + '0');
   LCD_COMMAND(0XC0);      DELAY_US(1);  LCD_DATA("VELOCITY:");
   LCD_COMMAND(0XCD);      DELAY_US(1);  LCD_DATA((INT)VELOCITY_DISPLAY/100%10 + '0');
   LCD_COMMAND(0XCE);      DELAY_US(1);  LCD_DATA((INT)VELOCITY_DISPLAY/10%10 + '0');
   LCD_COMMAND(0XCF);      DELAY_US(1);  LCD_DATA((INT)VELOCITY_DISPLAY%10 + '0');
   LCD_COMMAND(0XD0);      DELAY_US(1);  LCD_DATA('.');
   LCD_COMMAND(0XD1);      DELAY_US(1);  LCD_DATA(((INT)(VELOCITY_DISPLAY*10))%10 + '0');
   LCD_COMMAND(0X94);      DELAY_US(1);  LCD_DATA("TEMPERATURE:");
   LCD_COMMAND(0XA1);      DELAY_US(1);  LCD_DATA(((INT) ADC_RES)/10%10 + '0');
   LCD_COMMAND(0XA2);      DELAY_US(1);  LCD_DATA(((INT) ADC_RES)%10 + '0');
   LCD_COMMAND(0XA3);      DELAY_US(1);  LCD_DATA('.');
   LCD_COMMAND(0XA4);      DELAY_US(1);  LCD_DATA(((INT)(ADC_RES*10))%10 + '0');
}

VOID READ_TEMPERATURE(){
   ADC_RES = READ_ADC();
   ADC_RES = ADC_RES/2.046;   
}

VOID DUTY_TO_ANGLE(){
   FLOAT DUTY_FLOAT = (FLOAT)DUTY;
   ANGLE = (DUTY_FLOAT/6.24 - 2.0)*18.0;
   IF (ANGLE < 0){ANGLE = 0;}
   IF (ANGLE > 180){ANGLE = 180;}
}

VOID MAIN(){
   // OSCILLATOR SETUP
   SETUP_OSCILLATOR(0x11);
   
   // TIMER SETUP
   SETUP_TIMER_1(T1_INTERNAL | T1_DIV_BY_1);
   SET_TIMER1(34286);
   // PORT SETUP
   SET_TRIS_C(0x00);
   SET_TRIS_A(0xFF);
   SET_TRIS_B(0xFF);
   
   // INTERRUPTS SETUP
   ENABLE_INTERRUPTS(GLOBAL);
   ENABLE_INTERRUPTS(INT_RB0);
   ENABLE_INTERRUPTS(INT_RB1);
   ENABLE_INTERRUPTS(INT_RB2);
   ENABLE_INTERRUPTS(INT_RB3);
   ENABLE_INTERRUPTS(INT_TIMER1);
   
   // ADC SETUP
   SETUP_ADC(ADC_CLOCK_DIV_8);
   SETUP_ADC_PORTS(SAN0);
   SET_ADC_CHANNEL(0);
   
   // PWM SETUP
   SETUP_CCP1(CCP_PWM); 
   SETUP_TIMER_2(T2_DIV_BY_4,155,1);
   SET_PWM1_DUTY(DUTY);
   
   // LCD SETUP
   LCD_SETUP();
   WHILE(TRUE){
      SET_PWM1_DUTY(DUTY);
      DUTY_TO_ANGLE();
      READ_TEMPERATURE();
      DISPLAY();
   }
}




